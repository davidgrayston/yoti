<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Attribute.proto
 */


namespace attrpubapi_v1;

/**
 * Protobuf message : attrpubapi_v1.Anchor
 */
class Anchor extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * artifact_link optional bytes = 1
     *
     * @var \Protobuf\Stream
     */
    protected $artifact_link = null;

    /**
     * origin_server_certs repeated bytes = 2
     *
     * @var \Protobuf\Collection
     */
    protected $origin_server_certs = null;

    /**
     * artifact_signature optional bytes = 3
     *
     * @var \Protobuf\Stream
     */
    protected $artifact_signature = null;

    /**
     * sub_type optional string = 4
     *
     * @var string
     */
    protected $sub_type = null;

    /**
     * signature optional bytes = 5
     *
     * @var \Protobuf\Stream
     */
    protected $signature = null;

    /**
     * signed_time_stamp optional bytes = 6
     *
     * @var \Protobuf\Stream
     */
    protected $signed_time_stamp = null;

    /**
     * Check if 'artifact_link' has a value
     *
     * @return bool
     */
    public function hasArtifactLink()
    {
        return $this->artifact_link !== null;
    }

    /**
     * Get 'artifact_link' value
     *
     * @return \Protobuf\Stream
     */
    public function getArtifactLink()
    {
        return $this->artifact_link;
    }

    /**
     * Set 'artifact_link' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setArtifactLink($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->artifact_link = $value;
    }

    /**
     * Check if 'origin_server_certs' has a value
     *
     * @return bool
     */
    public function hasOriginServerCertsList()
    {
        return $this->origin_server_certs !== null;
    }

    /**
     * Get 'origin_server_certs' value
     *
     * @return \Protobuf\Collection
     */
    public function getOriginServerCertsList()
    {
        return $this->origin_server_certs;
    }

    /**
     * Set 'origin_server_certs' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setOriginServerCertsList(\Protobuf\Collection $value = null)
    {
        $this->origin_server_certs = $value;
    }

    /**
     * Add a new element to 'origin_server_certs'
     *
     * @param \Protobuf\Stream $value
     */
    public function addOriginServerCerts($value)
    {
        if ($this->origin_server_certs === null) {
            $this->origin_server_certs = new \Protobuf\StreamCollection();
        }

        $this->origin_server_certs->add(\Protobuf\Stream::wrap($value));
    }

    /**
     * Check if 'artifact_signature' has a value
     *
     * @return bool
     */
    public function hasArtifactSignature()
    {
        return $this->artifact_signature !== null;
    }

    /**
     * Get 'artifact_signature' value
     *
     * @return \Protobuf\Stream
     */
    public function getArtifactSignature()
    {
        return $this->artifact_signature;
    }

    /**
     * Set 'artifact_signature' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setArtifactSignature($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->artifact_signature = $value;
    }

    /**
     * Check if 'sub_type' has a value
     *
     * @return bool
     */
    public function hasSubType()
    {
        return $this->sub_type !== null;
    }

    /**
     * Get 'sub_type' value
     *
     * @return string
     */
    public function getSubType()
    {
        return $this->sub_type;
    }

    /**
     * Set 'sub_type' value
     *
     * @param string $value
     */
    public function setSubType($value = null)
    {
        $this->sub_type = $value;
    }

    /**
     * Check if 'signature' has a value
     *
     * @return bool
     */
    public function hasSignature()
    {
        return $this->signature !== null;
    }

    /**
     * Get 'signature' value
     *
     * @return \Protobuf\Stream
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * Set 'signature' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSignature($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->signature = $value;
    }

    /**
     * Check if 'signed_time_stamp' has a value
     *
     * @return bool
     */
    public function hasSignedTimeStamp()
    {
        return $this->signed_time_stamp !== null;
    }

    /**
     * Get 'signed_time_stamp' value
     *
     * @return \Protobuf\Stream
     */
    public function getSignedTimeStamp()
    {
        return $this->signed_time_stamp;
    }

    /**
     * Set 'signed_time_stamp' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSignedTimeStamp($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->signed_time_stamp = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'artifact_link' => null,
            'origin_server_certs' => [],
            'artifact_signature' => null,
            'sub_type' => null,
            'signature' => null,
            'signed_time_stamp' => null
        ], $values);

        $message->setArtifactLink($values['artifact_link']);
        $message->setArtifactSignature($values['artifact_signature']);
        $message->setSubType($values['sub_type']);
        $message->setSignature($values['signature']);
        $message->setSignedTimeStamp($values['signed_time_stamp']);

        foreach ($values['origin_server_certs'] as $item) {
            $message->addOriginServerCerts($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'Anchor',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'artifact_link',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'origin_server_certs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'artifact_signature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'sub_type',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'signature',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'signed_time_stamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->artifact_link !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeByteStream($stream, $this->artifact_link);
        }

        if ($this->origin_server_certs !== null) {
            foreach ($this->origin_server_certs as $val) {
                $writer->writeVarint($stream, 18);
                $writer->writeByteStream($stream, $val);
            }
        }

        if ($this->artifact_signature !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeByteStream($stream, $this->artifact_signature);
        }

        if ($this->sub_type !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->sub_type);
        }

        if ($this->signature !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeByteStream($stream, $this->signature);
        }

        if ($this->signed_time_stamp !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeByteStream($stream, $this->signed_time_stamp);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->artifact_link = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                if ($this->origin_server_certs === null) {
                    $this->origin_server_certs = new \Protobuf\StreamCollection();
                }

                $this->origin_server_certs->add($reader->readByteStream($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->artifact_signature = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->sub_type = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->signature = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->signed_time_stamp = $reader->readByteStream($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->artifact_link !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->artifact_link);
        }

        if ($this->origin_server_certs !== null) {
            foreach ($this->origin_server_certs as $val) {
                $size += 1;
                $size += $calculator->computeByteStreamSize($val);
            }
        }

        if ($this->artifact_signature !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->artifact_signature);
        }

        if ($this->sub_type !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->sub_type);
        }

        if ($this->signature !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->signature);
        }

        if ($this->signed_time_stamp !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->signed_time_stamp);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->artifact_link = null;
        $this->origin_server_certs = null;
        $this->artifact_signature = null;
        $this->sub_type = null;
        $this->signature = null;
        $this->signed_time_stamp = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \attrpubapi_v1\Anchor) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->artifact_link = ($message->artifact_link !== null) ? $message->artifact_link : $this->artifact_link;
        $this->origin_server_certs = ($message->origin_server_certs !== null) ? $message->origin_server_certs : $this->origin_server_certs;
        $this->artifact_signature = ($message->artifact_signature !== null) ? $message->artifact_signature : $this->artifact_signature;
        $this->sub_type = ($message->sub_type !== null) ? $message->sub_type : $this->sub_type;
        $this->signature = ($message->signature !== null) ? $message->signature : $this->signature;
        $this->signed_time_stamp = ($message->signed_time_stamp !== null) ? $message->signed_time_stamp : $this->signed_time_stamp;
    }


}

